{
  "version": 3,
  "sources": ["../../supersimpledev/chatbot.js", "../../supersimpledev/index.js"],
  "sourcesContent": ["// This is a simple chatbot used for SuperSimpleDev\n// coding tutorials: https://youtube.com/@SuperSimpleDev\n\nconst Chatbot = {\n  defaultResponses: {\n    'hello hi': `Hello! How can I help you?`,\n    'how are you': `I'm doing great! How can I help you?`,\n    'flip a coin': function () {\n      const randomNumber = Math.random();\n      if (randomNumber < 0.5) {\n        return 'Sure! You got heads';\n      } else {\n        return 'Sure! You got tails';\n      }\n    },\n    'roll a dice': function() {\n      const diceResult = Math.floor(Math.random() * 6) + 1;\n      return `Sure! You got ${diceResult}`;\n    },\n    'what is the date today': function () {\n      const now = new Date();\n      const months = [\n        'January', 'February', 'March', 'April', 'May', 'June',\n        'July', 'August', 'September', 'October', 'November', 'December'\n      ];\n      const month = months[now.getMonth()];\n      const day = now.getDate();\n\n      return `Today is ${month} ${day}`;\n    },\n    'thank': 'No problem! Let me know if you need help with anything else!',\n  },\n\n  additionalResponses: {},\n\n  unsuccessfulResponse: `Sorry, I didn't quite understand that. Currently, I only know how to flip a coin, roll a dice, or get today's date. Let me know how I can help!`,\n\n  emptyMessageResponse: `Sorry, it looks like your message is empty. Please make sure you send a message and I will give you a response.`,\n\n  addResponses: function (additionalResponses) {\n    this.additionalResponses = {\n      ...this.additionalResponses,\n      ...additionalResponses\n    };\n  },\n\n  getResponse: function (message) {\n    if (!message) {\n      return this.emptyMessageResponse;\n    }\n\n    // This spread operator (...) combines the 2 objects.\n    const responses = {\n      ...this.defaultResponses,\n      ...this.additionalResponses,\n    };\n\n    const {\n      ratings,\n      bestMatchIndex,\n    } = this.stringSimilarity(message, Object.keys(responses));\n\n    const bestResponseRating = ratings[bestMatchIndex].rating;\n    if (bestResponseRating <= 0.3) {\n      return this.unsuccessfulResponse;\n    }\n\n    const bestResponseKey = ratings[bestMatchIndex].target;\n    const response = responses[bestResponseKey];\n\n    if (typeof response === 'function') {\n      return response();\n    } else {\n      return response;\n    }\n  },\n\n  getResponseAsync: function (message) {\n    return new Promise((resolve) => {\n      // Pretend it takes some time for the chatbot to response.\n      setTimeout(() => {\n        resolve(this.getResponse(message));\n      }, 1000);\n    });\n  },\n\n  compareTwoStrings: function (first, second) {\n    first = first.replace(/\\s+/g, '')\n    second = second.replace(/\\s+/g, '')\n\n    if (first === second) return 1;\n    if (first.length < 2 || second.length < 2) return 0;\n\n    let firstBigrams = new Map();\n    for (let i = 0; i < first.length - 1; i++) {\n      const bigram = first.substring(i, i + 2);\n      const count = firstBigrams.has(bigram)\n        ? firstBigrams.get(bigram) + 1\n        : 1;\n\n      firstBigrams.set(bigram, count);\n    };\n\n    let intersectionSize = 0;\n    for (let i = 0; i < second.length - 1; i++) {\n      const bigram = second.substring(i, i + 2);\n      const count = firstBigrams.has(bigram)\n        ? firstBigrams.get(bigram)\n        : 0;\n\n      if (count > 0) {\n        firstBigrams.set(bigram, count - 1);\n        intersectionSize++;\n      }\n    }\n\n    return (2.0 * intersectionSize) / (first.length + second.length - 2);\n  },\n\n  stringSimilarity: function (mainString, targetStrings) {\n    const ratings = [];\n    let bestMatchIndex = 0;\n\n    for (let i = 0; i < targetStrings.length; i++) {\n      const currentTargetString = targetStrings[i];\n      const currentRating = this.compareTwoStrings(mainString, currentTargetString)\n      ratings.push({target: currentTargetString, rating: currentRating})\n      if (currentRating > ratings[bestMatchIndex].rating) {\n        bestMatchIndex = i\n      }\n    }\n\n    const bestMatch = ratings[bestMatchIndex]\n\n    return { ratings: ratings, bestMatch: bestMatch, bestMatchIndex: bestMatchIndex };\n  },\n};\n\n// Define the randomUUID() function if it doesn't exist.\nfunction uuidPolyfill() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (char) {\n    const randomNumber = Math.random() * 16 | 0;\n    const result = char === 'x' ? randomNumber : (randomNumber & 0x3 | 0x8);\n    return result.toString(16);\n  });\n}\n\n// This code allows Chatbot to be used in both the browser and\n// in NodeJS. This is called UMD (Universal Module Definition).\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define([], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // Node/CommonJS\n    module.exports = factory();\n  } else {\n    // Create a fallback if window.crypto is undefined.\n    if (typeof root.crypto === 'undefined') {\n      try {\n        root.crypto = {};\n      } catch (e) {}\n    }\n\n    // Create a fallback crypto.randomUUID() function.\n    if (root.crypto && typeof root.crypto.randomUUID !== 'function') {\n      try {\n        root.crypto.randomUUID = uuidPolyfill;\n      } catch (e) {}\n    }\n\n    // Browser global\n    root.Chatbot = factory();\n    root.chatbot = factory();\n  }\n}(typeof self !== 'undefined' ? self : this, function () {\n  return Chatbot;\n}));", "const Chatbot = require('./chatbot');\n\n// Define the randomUUID() function if it doesn't exist.\nfunction uuidPolyfill() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (char) {\n    const randomNumber = Math.random() * 16 | 0;\n    const result = char === 'x' ? randomNumber : (randomNumber & 0x3 | 0x8);\n    return result.toString(16);\n  });\n}\n\n// In the browser.\nif (typeof window !== 'undefined') {\n  // Create a fallback if window.crypto is undefined.\n  if (typeof window.crypto === 'undefined') {\n    try {\n      window.crypto = {};\n    } catch (e) {}\n  }\n\n  // Create a fallback if crypto.randomUUID() doesn't exist.\n  if (window.crypto && typeof window.crypto.randomUUID !== 'function') {\n    try {\n      window.crypto.randomUUID = uuidPolyfill;\n    } catch (e) {}\n  }\n}\n\nmodule.exports = {\n  Chatbot,\n  chatbot: Chatbot\n};"],
  "mappings": "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",
  "names": []
}
